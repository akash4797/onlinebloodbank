import Head from "next/head";
import Link from "next/link";
import React from "react";
import { NextAuthStore, pocketClient } from "../lib/pocketbase";
import moment from "moment";
import { useRouter } from "next/router";
import Layout from "../components/Layout/Layout";

export default function Updateprofile({ user }) {
  const router = useRouter();
  const handleSubmit = async (e) => {
    e.preventDefault();
    const name = e.target.name.value;
    const address = e.target.address.value;
    const weight = e.target.weight.value;
    const habits = e.target.habits.value;
    const healthcondition = e.target.healthcondition.value;
    const dateofbirth = e.target.dateofbirth.value;

    try {
      const updateProfile = await pocketClient.records.update(
        "profiles",
        user.profile.id,
        {
          name: name,
          address,
          weight,
          habits,
          healthcondition,
          dateofbirth,
          profileupdated: true,
        }
      );
      //   alert("updated")
      if (!user.profile.profileupdated) {
        router.push("/");
      } else {
        router.reload();
      }
    } catch (e) {
      console.log(e.data);
      // alert("something is wrong")
    }
  };
  return (
    <div>
      <Head>
        <title>Pocket Base | Signup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout user={user}>
        <main
          className={`${
            user.profile.profileupdated ? "mt-10" : "h-screen"
          } flex justify-center items-center`}
        >
          <form
            className="flex flex-col gap-5"
            onSubmit={(e) => handleSubmit(e)}
          >
            <h1 className="text-2xl font-bold text-center uppercase">
              {user.profile.profileupdated
                ? "Update profile"
                : "Few Information to go"}
            </h1>
            <div className="flex gap-10">
              <div className="w-1/2 flex flex-col gap-3">
                <div className="flex flex-col gap-1">
                  <label htmlFor="name">Name</label>
                  <input
                    name="name"
                    defaultValue={user.profile.name || ""}
                    type="text"
                    placeholder="eg. John Doe"
                    className="border p-2"
                  />
                </div>
                <div className="flex flex-col gap-1">
                  <label htmlFor="address">Address</label>
                  <input
                    name="address"
                    defaultValue={user.profile.address || ""}
                    type="text"
                    placeholder="eg. Mohakhali"
                    className="border p-2"
                  />
                </div>
                <div className="flex flex-col gap-1">
                  <label htmlFor="weight">Weight</label>
                  <input
                    name="weight"
                    defaultValue={user.profile.weight || ""}
                    type="number"
                    placeholder="eg. 60"
                    className="border p-2"
                  />
                </div>
              </div>
              <div className="w-1/2 flex flex-col gap-3">
                <div className="flex flex-col gap-1">
                  <label htmlFor="habits">Habits</label>
                  <input
                    name="habits"
                    defaultValue={user.profile.habits || ""}
                    type="text"
                    placeholder="eg. smoking, late sleep"
                    className="border p-2"
                  />
                </div>
                <div className="flex flex-col gap-1">
                  <label htmlFor="dateofbirth">Date of Birth</label>
                  <input
                    name="dateofbirth"
                    defaultValue={
                      user.profile.dateofbirth
                        ? moment(user.profile.dateofbirth).format("yyyy-MM-DD")
                        : ""
                    }
                    type="date"
                    placeholder="Date of birth"
                    className="border p-2"
                  />
                </div>
              </div>
            </div>
            <div className="flex flex-col gap-1">
              <label htmlFor="healthcondition">Health Condition</label>
              <textarea
                name="healthcondition"
                defaultValue={user.profile.healthcondition || ""}
                placeholder="Write your current health condition"
                className="border p-2"
              ></textarea>
            </div>

            <input
              type="submit"
              value={"Submit"}
              className="bg-black text-white p-2 w-full cursor-pointer"
            />
          </form>
        </main>
      </Layout>
    </div>
  );
}
export async function getServerSideProps({ req, res }) {
  pocketClient.authStore = new NextAuthStore(req, res);

  if (!pocketClient.authStore.isValid) {
    return {
      redirect: {
        parmanent: false,
        destination: "/login",
      },
    };
  }

  let user;
  try {
    const reqUser = await pocketClient.users.getOne(
      // @ts-ignore
      pocketClient.authStore.model?.id
    );
    user = JSON.parse(JSON.stringify(reqUser));
    if (user.profile.admin) throw new Error("Not Authorized");
  } catch (error) {
    return {
      redirect: {
        parmanent: false,
        destination: "/login",
      },
    };
  }

  await pocketClient.users.refresh();
  return {
    props: {
      user,
    },
  };
}
